# Simple Graph API calls using certificate - leverages existing modules

param(
    [Parameter(Mandatory)]
    [string]$TenantId,
    
    [Parameter(Mandatory)]
    [string]$ClientId,
    
    [Parameter(Mandatory)]
    [string]$CertificateThumbprint,
    
    [Parameter(Mandatory)]
    [string]$GraphEndpoint
)

# Method 1: Use Microsoft.Graph module (simplest)
try {
    Write-Host "Method 1: Using Microsoft.Graph module..." -ForegroundColor Green
    
    # Install if needed (uncomment if not installed)
    # Install-Module Microsoft.Graph.Authentication -Force
    
    # Connect using certificate
    Connect-MgGraph -ClientId $ClientId -TenantId $TenantId -CertificateThumbprint $CertificateThumbprint
    
    # Make the call using Invoke-MgGraphRequest
    $Response = Invoke-MgGraphRequest -Uri $GraphEndpoint -Method GET
    
    Write-Host "✓ Success using Microsoft.Graph module" -ForegroundColor Green
    $Response | ConvertTo-Json -Depth 10
    
    Disconnect-MgGraph
    return $Response
    
} catch {
    Write-Warning "Microsoft.Graph module failed: $($_.Exception.Message)"
}

# Method 2: Use MSAL.PS module (simpler than manual JWT)
try {
    Write-Host "`nMethod 2: Using MSAL.PS module..." -ForegroundColor Green
    
    # Install if needed (uncomment if not installed)
    # Install-Module MSAL.PS -Force
    
    # Get token using MSAL
    $MsalToken = Get-MsalToken -ClientId $ClientId -TenantId $TenantId -ClientCertificate (Get-ChildItem "Cert:\CurrentUser\My\$CertificateThumbprint")
    
    # Make Graph call
    $Headers = @{
        'Authorization' = "Bearer $($MsalToken.AccessToken)"
        'Content-Type' = 'application/json'
    }
    
    $Response = Invoke-RestMethod -Uri $GraphEndpoint -Headers $Headers -Method Get
    
    Write-Host "✓ Success using MSAL.PS module" -ForegroundColor Green
    $Response | ConvertTo-Json -Depth 10
    
    return $Response
    
} catch {
    Write-Warning "MSAL.PS module failed: $($_.Exception.Message)"
}

# Method 3: One-liner using Connect-MgGraph
function Quick-GraphCall {
    param($TenantId, $ClientId, $CertThumbprint, $Endpoint)
    
    Connect-MgGraph -ClientId $ClientId -TenantId $TenantId -CertificateThumbprint $CertThumbprint -NoWelcome
    $result = Invoke-MgGraphRequest -Uri $Endpoint -Method GET
    Disconnect-MgGraph
    return $result
}

# Usage examples:
<#
# Simple usage with Microsoft.Graph module
.\Simple-GraphCert.ps1 -TenantId "your-tenant" -ClientId "your-client" -CertificateThumbprint "your-thumbprint" -GraphEndpoint "https://graph.microsoft.com/v1.0/sites"

# One-liner
$sites = Quick-GraphCall -TenantId "xxx" -ClientId "xxx" -CertThumbprint "xxx" -Endpoint "https://graph.microsoft.com/v1.0/sites"

# Interactive - will prompt for parameters
$tenant = Read-Host "Tenant ID"
$client = Read-Host "Client ID" 
$thumb = Read-Host "Certificate Thumbprint"
$endpoint = Read-Host "Graph Endpoint"
Quick-GraphCall -TenantId $tenant -ClientId $client -CertThumbprint $thumb -Endpoint $endpoint
#>
