# PowerShell equivalent of the bash script for Microsoft Graph API calls

param(
    [Parameter(Mandatory)]
    [string]$TenantId,          # "your-tenant-id"
    
    [Parameter(Mandatory)]
    [string]$ClientId,          # "your-client-id"
    
    [Parameter(Mandatory)]
    [string]$ClientSecret,      # "your-client-secret"
    
    [Parameter(Mandatory)]
    [string]$GraphEndpoint      # "query-uri"
)

try {
    Write-Host "Getting access token..." -ForegroundColor Green
    
    # Step 1: Get access token
    $TokenUri = "https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token"
    
    $TokenBody = @{
        client_id     = $ClientId
        client_secret = $ClientSecret
        scope         = "https://graph.microsoft.com/.default"
        grant_type    = "client_credentials"
    }
    
    $TokenResponse = Invoke-RestMethod -Uri $TokenUri -Method Post -Body $TokenBody -ContentType "application/x-www-form-urlencoded"
    $AccessToken = $TokenResponse.access_token
    
    Write-Host "✓ Access token obtained" -ForegroundColor Green
    
    # Step 2: Make Graph API call
    Write-Host "Making Graph API call to: $GraphEndpoint" -ForegroundColor Cyan
    
    $Headers = @{
        'Authorization' = "Bearer $AccessToken"
        'Content-Type'  = 'application/json'
    }
    
    $GraphResponse = Invoke-RestMethod -Uri $GraphEndpoint -Method Get -Headers $Headers
    
    Write-Host "✓ Graph API call successful" -ForegroundColor Green
    
    # Step 3: Display results
    Write-Host "`nResponse:" -ForegroundColor Yellow
    $GraphResponse | ConvertTo-Json -Depth 10 | Write-Host
    
    # Return the response for further processing
    return $GraphResponse
    
} catch {
    Write-Error "Error: $($_.Exception.Message)"
    
    if ($_.Exception.Response) {
        Write-Host "Status Code: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
        
        try {
            $ErrorStream = $_.Exception.Response.GetResponseStream()
            $Reader = New-Object System.IO.StreamReader($ErrorStream)
            $ErrorBody = $Reader.ReadToEnd()
            Write-Host "Error Details: $ErrorBody" -ForegroundColor Red
        } catch {
            Write-Host "Could not read error response" -ForegroundColor Red
        }
    }
    
    throw
}

# Usage examples:
<#
# Example 1: Get Entra ID App Registrations
.\GraphAPI-Call.ps1 -TenantId "1234-1234-1234-1234" -ClientId "1234-1234-1234-1234" -ClientSecret "abcdefghijklmnop" -GraphEndpoint "https://graph.microsoft.com/v1.0/applications?`$select=id,displayName,passwordCredentials,keyCredentials"

# Example 2: Get SharePoint sites
.\GraphAPI-Call.ps1 -TenantId "your-tenant-id" -ClientId "your-client-id" -ClientSecret "your-secret" -GraphEndpoint "https://graph.microsoft.com/v1.0/sites"

# Example 3: Get specific site
.\GraphAPI-Call.ps1 -TenantId "your-tenant-id" -ClientId "your-client-id" -ClientSecret "your-secret" -GraphEndpoint "https://graph.microsoft.com/v1.0/sites/yourtenant.sharepoint.com:/sites/yoursite"

# Example 4: Get users
.\GraphAPI-Call.ps1 -TenantId "your-tenant-id" -ClientId "your-client-id" -ClientSecret "your-secret" -GraphEndpoint "https://graph.microsoft.com/v1.0/users?`$select=displayName,userPrincipalName,id"
#>

# Alternative: Interactive version with prompts
function Invoke-GraphApiInteractive {
    $TenantId = Read-Host "Enter Tenant ID"
    $ClientId = Read-Host "Enter Client ID"
    $ClientSecret = Read-Host "Enter Client Secret" -AsSecureString
    $GraphEndpoint = Read-Host "Enter Graph API endpoint URL"
    
    # Convert secure string back to plain text
    $PlainSecret = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($ClientSecret))
    
    try {
        # Get token
        $TokenUri = "https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token"
        $TokenBody = @{
            client_id     = $ClientId
            client_secret = $PlainSecret
            scope         = "https://graph.microsoft.com/.default"
            grant_type    = "client_credentials"
        }
        
        $TokenResponse = Invoke-RestMethod -Uri $TokenUri -Method Post -Body $TokenBody -ContentType "application/x-www-form-urlencoded"
        
        # Make Graph call
        $Headers = @{
            'Authorization' = "Bearer $($TokenResponse.access_token)"
            'Content-Type'  = 'application/json'
        }
        
        $GraphResponse = Invoke-RestMethod -Uri $GraphEndpoint -Method Get -Headers $Headers
        
        Write-Host "Success! Response:" -ForegroundColor Green
        $GraphResponse | ConvertTo-Json -Depth 10
        
        return $GraphResponse
        
    } catch {
        Write-Error "Failed: $($_.Exception.Message)"
    } finally {
        # Clear sensitive data
        $PlainSecret = $null
    }
}

# One-liner version for quick testing
function Get-GraphData {
    param($TenantId, $ClientId, $ClientSecret, $Endpoint)
    
    $token = (Invoke-RestMethod -Uri "https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token" -Method Post -Body @{client_id=$ClientId;client_secret=$ClientSecret;scope="https://graph.microsoft.com/.default";grant_type="client_credentials"} -ContentType "application/x-www-form-urlencoded").access_token
    
    return Invoke-RestMethod -Uri $Endpoint -Headers @{Authorization="Bearer $token";'Content-Type'='application/json'} -Method Get
}

# Usage: 
# $result = Get-GraphData -TenantId "xxx" -ClientId "xxx" -ClientSecret "xxx" -Endpoint "https://graph.microsoft.com/v1.0/sites"
